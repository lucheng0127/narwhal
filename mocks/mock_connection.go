// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/connection/connection.go

// Package mocks is a generated GoMock package.
package mocks

import (
	net "net"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	connection "github.com/lucheng0127/narwhal/pkg/connection"
)

// MockConnection is a mock of Connection interface.
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
}

// MockConnectionMockRecorder is the mock recorder for MockConnection.
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance.
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// BindAndProxy mocks base method.
func (m *MockConnection) BindAndProxy(bPort int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindAndProxy", bPort)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindAndProxy indicates an expected call of BindAndProxy.
func (mr *MockConnectionMockRecorder) BindAndProxy(bPort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindAndProxy", reflect.TypeOf((*MockConnection)(nil).BindAndProxy), bPort)
}

// Close mocks base method.
func (m *MockConnection) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockConnectionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConnection)(nil).Close))
}

// GetArrs mocks base method.
func (m *MockConnection) GetArrs() connection.Arrs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArrs")
	ret0, _ := ret[0].(connection.Arrs)
	return ret0
}

// GetArrs indicates an expected call of GetArrs.
func (mr *MockConnectionMockRecorder) GetArrs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArrs", reflect.TypeOf((*MockConnection)(nil).GetArrs))
}

// NewPConn mocks base method.
func (m *MockConnection) NewPConn(pConn net.Conn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NewPConn", pConn)
}

// NewPConn indicates an expected call of NewPConn.
func (mr *MockConnectionMockRecorder) NewPConn(pConn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPConn", reflect.TypeOf((*MockConnection)(nil).NewPConn), pConn)
}

// SetAuthCtx mocks base method.
func (m *MockConnection) SetAuthCtx(authCtx string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAuthCtx", authCtx)
}

// SetAuthCtx indicates an expected call of SetAuthCtx.
func (mr *MockConnectionMockRecorder) SetAuthCtx(authCtx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAuthCtx", reflect.TypeOf((*MockConnection)(nil).SetAuthCtx), authCtx)
}

// SetToProxyConn mocks base method.
func (m *MockConnection) SetToProxyConn() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetToProxyConn")
}

// SetToProxyConn indicates an expected call of SetToProxyConn.
func (mr *MockConnectionMockRecorder) SetToProxyConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetToProxyConn", reflect.TypeOf((*MockConnection)(nil).SetToProxyConn))
}

// SetUID mocks base method.
func (m *MockConnection) SetUID(uid string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUID", uid)
}

// SetUID indicates an expected call of SetUID.
func (mr *MockConnectionMockRecorder) SetUID(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUID", reflect.TypeOf((*MockConnection)(nil).SetUID), uid)
}
