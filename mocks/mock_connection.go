// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/connection/connection.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockConnection is a mock of Connection interface.
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
}

// MockConnectionMockRecorder is the mock recorder for MockConnection.
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance.
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockConnection) Auth() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Auth")
}

// Auth indicates an expected call of Auth.
func (mr *MockConnectionMockRecorder) Auth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockConnection)(nil).Auth))
}

// Close mocks base method.
func (m *MockConnection) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockConnectionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConnection)(nil).Close))
}

// Proxy mocks base method.
func (m *MockConnection) Proxy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Proxy")
}

// Proxy indicates an expected call of Proxy.
func (mr *MockConnectionMockRecorder) Proxy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Proxy", reflect.TypeOf((*MockConnection)(nil).Proxy))
}

// ReplayWithAuthCtx mocks base method.
func (m *MockConnection) ReplayWithAuthCtx() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReplayWithAuthCtx")
}

// ReplayWithAuthCtx indicates an expected call of ReplayWithAuthCtx.
func (mr *MockConnectionMockRecorder) ReplayWithAuthCtx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplayWithAuthCtx", reflect.TypeOf((*MockConnection)(nil).ReplayWithAuthCtx))
}

// ReplayWithCode mocks base method.
func (m *MockConnection) ReplayWithCode(code byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReplayWithCode", code)
}

// ReplayWithCode indicates an expected call of ReplayWithCode.
func (mr *MockConnectionMockRecorder) ReplayWithCode(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplayWithCode", reflect.TypeOf((*MockConnection)(nil).ReplayWithCode), code)
}

// Serve mocks base method.
func (m *MockConnection) Serve() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Serve")
}

// Serve indicates an expected call of Serve.
func (mr *MockConnectionMockRecorder) Serve() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serve", reflect.TypeOf((*MockConnection)(nil).Serve))
}
